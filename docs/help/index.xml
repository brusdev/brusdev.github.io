<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Help on</title><link>/docs/help/</link><description>Recent content in Help on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="/docs/help/index.xml" rel="self" type="application/rss+xml"/><item><title>Building</title><link>/docs/help/building/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/building/</guid><description>Building the operator # General environment requirements # A kubernetes cluster # Currently the operator is tested against kubernetes v1.20. You can install a Minikube or a CodeReady Containers(CRC) to deploy the operator.
Docker # Current version being used is v20.10. Checkout this page for help on installing docker on your specific operating system.
Go v1.16 # Install Go version v1.16 following this guide.
operator-sdk v1.15.0 # Install operator-sdk following this guide.</description></item><item><title>Bundle</title><link>/docs/help/bundle/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/bundle/</guid><description>Bunding A Bundle and Deploy it into the Operator Lifecycle Manager(OLM) # About the Operator Lifecycle Manager (OLM) # The Operator Lifecycle Manager can help users to install and manage operators. The ArtemisCloud operator can be built into a bundle image and installed into OLM.
Building # Creating the bundle&amp;rsquo;s manifests/metadata # Before you build the bundle image generate the manifests and metadata:
make IMAGE_TAG_BASE=&amp;lt;bundle image registry&amp;gt; OPERATOR_IMAGE_REPO=&amp;lt;operator image registry&amp;gt; OPERATOR_VERSION=&amp;lt;operator tag&amp;gt; bundle You&amp;rsquo;ll get some warnings like</description></item><item><title>Custom Resources</title><link>/docs/help/custom-resources/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/custom-resources/</guid><description>Custom Resource configuration reference # A Custom Resource Definition (CRD) is a schema of configuration items for a custom Kubernetes object deployed with an Operator. By deploying a corresponding Custom Resource (CR) instance, you specify values for configuration items shown in the CRD.
The following sub-sections detail the configuration items that you can set in Custom Resource instances based on the main broker and addressing CRDs.
Broker Custom Resource configuration reference # A CR instance based on the main broker CRD enables you to configure brokers for deployment in a Kubernetes project.</description></item><item><title>Images</title><link>/docs/help/images/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/images/</guid><description>Overview of the ArtemisCloud Container images # Docs to Follow
The basic Container Image # The Basic Broker Container Image is the simplest of images to get started with, it uses environment variables to configure the broker and then starts it. You can find the basic Broker Container Image at quay.io
The Kubernetes Image # The Init Image # The Operator Image #</description></item><item><title>Operator</title><link>/docs/help/operator/</link><pubDate>Tue, 06 Oct 2020 08:49:31 +0000</pubDate><guid>/docs/help/operator/</guid><description>Overview of the ArtemisCloud Operator Custom Resource Definitions # In general, a Custom Resource Definition (CRD) is a schema of configuration items that you can modify for a custom Kubernetes object deployed with an Operator. By creating a corresponding Custom Resource (CR) instance, you can specify values for configuration items in the CRD. If you are an Operator developer, what you expose through a CRD essentially becomes the API for how a deployed object is configured and used.</description></item></channel></rss>